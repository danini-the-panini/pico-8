pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
pixels={}

colors={
 [0]={0, 0, 0},
	{0.1137254902, 0.168627451, 0.3254901961},
	{0.4941176471, 0.1450980392, 0.3254901961},
	{0, 0.5294117647, 0.3176470588},
	{0.6705882353, 0.3215686275, 0.2117647059},
	{0.3725490196, 0.3411764706, 0.3098039216},
	{0.7607843137, 0.7647058824, 0.7803921569},
	{1, 0.9450980392, 0.9098039216},
	{1, 0, 0.3019607843},
	{1, 0.6392156863, 0},
	{1, 0.9254901961, 0.1529411765},
	{0, 0.8941176471, 0.2117647059},
	{0.1607843137, 0.6784313725, 1},
	{0.5137254902, 0.462745098, 0.6117647059},
	{1, 0.4666666667, 0.6588235294},
	{1, 0.8, 0.6666666667}
}

dmap={
  {-0.4375, 0.0625, -0.3125, 0.1875},
  {0.3125, -0.1875, 0.4375, -0.0625},
  {-0.25, 0.25, -0.375, 0.125},
  {0.5, 0, 0.375, -0.125},
  {-0.4375, -0.4375, -0.4375, -0.4375}
}

function _init()
  for y=1,128,1 do
    pixels[y]={}
    for x=1,128,1 do
      pixels[y][x]={(x-1)/127,0,(y-1)/127}
    end
  end
end

function _update()
end

spread=1
function dither(c, x, y)
  d=spread*dmap[x%4+1][y%4+1]
  return {c[1]+d,c[2]+d,c[3]+d}
end

function find_color(rgb)
  best=0
  best_score=32767
  for i=0,15,1 do
    c=colors[i]
    dr=rgb[1]-c[1]
    dg=rgb[2]-c[2]
    db=rgb[3]-c[3]
    s=sqrt(dr*dr+dg*dg+db*db)
    if s < best_score then
      best=i
      best_score=s
    end
  end
  return best
end

function draw_pixels()
  for y=1,128,1 do
    for x=1,128,1 do
      p=pixels[y][x]
      pp=dither(p, x, y)
      c=find_color(pp)
      pset(x-1,y-1,c)
    end
  end
end

cleared=false
drawn=false
function _draw()
  if cleared then
    if not drawn then
      draw_pixels()
      drawn=true
    end
  else
    cls()
    print("processing...", 8, 8, 7)
    cleared=true
  end
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
